<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kiosko de Turnos - Salud Linux</title>
    
    @{
        // CORRECCIÓN CLAVE: Esto asegura que la vista se renderice
        // sin el Layout.cshtml principal (sin barras ni footers).
        Layout = null; 
    }

    <!-- Inclusión directa de recursos para no depender del Layout -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #eef2f6; /* Fondo suave */
            /* Centrado completo en pantalla */
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100vw; 
            margin: 0;
            padding: 0;
            overflow: hidden; /* Evita scrolls accidentales */
        }
        .kiosk-card {
            background-color: white;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            max-width: 600px;
            width: 95%;
        }
        .kiosk-btn {
            padding: 1.5rem 2.5rem; /* Botones grandes */
            font-size: 1.5rem;
            font-weight: 700;
            border-radius: 1rem;
            transition: all 0.2s;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            min-height: 5rem; /* Asegura un buen target táctil */
        }
        .btn-primary-kiosk {
            background-color: #3b82f6; 
            color: white;
        }
        .btn-primary-kiosk:hover:enabled {
            background-color: #2563eb;
            transform: translateY(-2px);
        }
        .btn-secondary-kiosk {
            background-color: #f59e0b; 
            color: white;
        }
        .btn-secondary-kiosk:hover:enabled {
            background-color: #d97706;
            transform: translateY(-2px);
        }
        .input-text {
            font-size: 1.5rem;
            padding: 0.75rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            width: 100%;
            text-align: center;
        }
        #customAlert {
            z-index: 50;
        }
    </style>
</head>
<body>
    
<div class="kiosk-card">
    
    <!-- Título Principal -->
    <h1 class="text-4xl font-extrabold text-gray-800 mb-8 text-center">
        <i class="fas fa-hospital-alt text-blue-500"></i> Bienvenido a Salud Linux
    </h1>
    
    <!-- 1. Pantalla Inicial -->
    <div id="initialScreen" class="space-y-6">
        <p class="text-xl text-gray-600 mb-6 font-semibold">
            Por favor, seleccione cómo desea ingresar al sistema de turnos:
        </p>
        <div class="flex flex-col md:flex-row gap-4">
            <button id="btnShowSearch" class="kiosk-btn btn-primary-kiosk flex-1">
                <i class="fas fa-address-card me-2"></i> Ingresar con Documento
            </button>
            <button id="btnAnonymousTurn" class="kiosk-btn btn-secondary-kiosk flex-1">
                <i class="fas fa-user-plus me-2"></i> Pedir Turno Anónimo
            </button>
        </div>
    </div>

    <!-- 2. Sección de Búsqueda de Documento -->
    <div id="searchSection" class="hidden space-y-6">
        <p class="text-xl text-gray-700 font-medium">
            Ingrese su número de documento:
        </p>
        <input type="number" id="inputDocumento" placeholder="Ej: 108500000" class="input-text focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition" />
        
        <div class="flex justify-between gap-4 pt-4">
            <button id="btnVolver" class="kiosk-btn bg-gray-300 text-gray-800 hover:bg-gray-400 flex-1">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
            <button id="btnBuscar" class="kiosk-btn bg-green-500 text-white hover:bg-green-600 flex-1">
                <i class="fas fa-search"></i> Buscar
            </button>
        </div>
        
        <div id="loadingIndicator" class="text-center text-blue-500 font-bold hidden">
            <i class="fas fa-spinner fa-spin me-2"></i> Buscando...
        </div>
    </div>

    <!-- 3. Sección de Confirmación/Bienvenida -->
    <div id="ticketSection" class="hidden text-center space-y-8">
        <h2 id="welcomeMessage" class="text-3xl font-bold text-gray-800"></h2>
        <button id="btnPedirTurno" class="kiosk-btn bg-red-500 text-white hover:bg-red-600 w-full">
            <i class="fas fa-ticket-alt me-2"></i> CONFIRMAR y Obtener Turno
        </button>
        <div id="mensajeTurno" class="text-xl font-semibold text-gray-600"></div>
    </div>
    
</div>

<!-- Modal Personalizado (Reemplazo de alert()) -->
<div id="customAlert" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-6 rounded-xl shadow-2xl text-center max-w-sm w-full">
        <h3 id="alertTitle" class="text-xl font-bold text-red-600 mb-3">Aviso</h3>
        <p id="alertMessage" class="text-gray-700 mb-4">Mensaje de alerta.</p>
        <button id="alertCloseBtn" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">
            Cerrar
        </button>
    </div>
</div>

<script>
    // --- Elementos del DOM ---
    const initialScreen = document.getElementById('initialScreen');
    const searchSection = document.getElementById('searchSection');
    const ticketSection = document.getElementById('ticketSection');
    const btnShowSearch = document.getElementById('btnShowSearch');
    const btnAnonymousTurn = document.getElementById('btnAnonymousTurn');
    const btnBuscar = document.getElementById('btnBuscar');
    const btnVolver = document.getElementById('btnVolver');
    const inputDocumento = document.getElementById('inputDocumento');
    const btnPedirTurno = document.getElementById('btnPedirTurno');
    const mensajeTurno = document.getElementById('mensajeTurno');
    const welcomeMessage = document.getElementById('welcomeMessage');
    const loadingIndicator = document.getElementById('loadingIndicator');

    // --- Custom Alert DOM elements ---
    const customAlert = document.getElementById('customAlert');
    const alertTitle = document.getElementById('alertTitle');
    const alertMessage = document.getElementById('alertMessage');
    const alertCloseBtn = document.getElementById('alertCloseBtn');

    let currentAffiliate = null;

    // --- FUNCIÓN DE ALERTA PERSONALIZADA (Reemplazo de alert()) ---
    function showAlert(title, message, isError = true) {
        alertTitle.textContent = title;
        alertMessage.textContent = message;
        alertTitle.classList.toggle('text-red-600', isError);
        alertTitle.classList.toggle('text-blue-600', !isError);
        customAlert.classList.remove('hidden');
    }

    alertCloseBtn.addEventListener('click', () => {
        customAlert.classList.add('hidden');
    });


    // --- MANEJO DE VISTAS ---
    btnShowSearch.addEventListener('click', () => {
        initialScreen.classList.add('hidden');
        searchSection.classList.remove('hidden');
        inputDocumento.focus(); // Enfoca el campo para ingreso rápido
    });

    btnVolver.addEventListener('click', () => {
        initialScreen.classList.remove('hidden');
        searchSection.classList.add('hidden');
        inputDocumento.value = '';
    });

    // --- LÓGICA DE TURNOS ---
    function imprimirTiquete(ticketId) {
        const url = `/Print/Ticket/${ticketId}`;
        // Abre la ventana de impresión en un nuevo pop-up pequeño
        window.open(url, 'ImpresionTiquete', 'width=300,height=300,left=100,top=100');
    }

    async function generarTurno() {
        if (currentAffiliate === null) return;

        mensajeTurno.textContent = 'Generando su turno...';
        btnPedirTurno.disabled = true;
        btnAnonymousTurn.disabled = true;

        try {
            // Usa el documentId si existe, si no, va vacío para el turno anónimo
            const docId = currentAffiliate.documentId || '';
            const url = `/api/Tickets/${docId}`;
            
            const respuesta = await fetch(url, { method: 'POST' });

            if (!respuesta.ok) throw new Error('Error del servidor al crear el tiquete.');

            const nuevoTiquete = await respuesta.json();
            
            // Mostrar mensaje de éxito
            mensajeTurno.innerHTML = `<p class="text-3xl text-green-600 font-extrabold">¡TURNO GENERADO!</p>
                                      <p class="text-7xl font-black text-blue-600 my-4">${nuevoTiquete.ticketCode}</p>
                                      <p class="text-xl text-gray-700">Recuerde su código. El sistema está imprimiendo su tiquete.</p>`;
            
            imprimirTiquete(nuevoTiquete.id);

        } catch (error) {
            console.error('Error al pedir el turno:', error);
            showAlert('Error de Servicio', 'No se pudo generar su turno. Intente nuevamente o llame a un asistente.', true);
            mensajeTurno.textContent = '';
        } finally {
            // Reinicia el kiosko después de un tiempo para el siguiente usuario
            setTimeout(() => { location.reload(); }, 10000); 
        }
    }

    // Botón para turno anónimo
    btnAnonymousTurn.addEventListener('click', () => {
        // Establecer un afiliado anónimo para la URL base y el mensaje
        currentAffiliate = { id: null, fullName: 'Visitante Anónimo', documentId: null };
        generarTurno();
    });

    // Botón para pedir turno después de buscar
    btnPedirTurno.addEventListener('click', generarTurno);

    // Botón para buscar afiliado
    btnBuscar.addEventListener('click', async () => {
        const docId = inputDocumento.value.trim();
        if (!docId) { showAlert('Campo Vacío', 'Por favor, ingrese su número de documento.', false); return; }

        loadingIndicator.classList.remove('hidden');
        btnBuscar.disabled = true;

        try {
            const response = await fetch(`/api/Affiliates/ByDocument/${docId}`);
            
            if (response.status === 404) {
                // Si no se encuentra, se da la opción de generar turno anónimo o regresar
                showAlert('Afiliado No Encontrado', 'No encontramos ese documento en el sistema. Puedes generar un turno como visitante.', true);
                currentAffiliate = { id: null, fullName: 'Visitante', documentId: docId };
                
            } else if (!response.ok) {
                throw new Error('Error del servidor: ' + response.status);
            } else {
                currentAffiliate = await response.json();
            }
            
            // Mostrar la sección de confirmación
            welcomeMessage.textContent = `Hola, ${currentAffiliate.fullName}.`;
            searchSection.classList.add('hidden');
            ticketSection.classList.remove('hidden');

        } catch (error) {
            console.error('Error buscando afiliado:', error);
            showAlert('Error de Conexión', 'No se pudo completar la búsqueda. Intente de nuevo.', true);
        } finally {
            loadingIndicator.classList.add('hidden');
            btnBuscar.disabled = false;
        }
    });
</script>

</body>
</html>
