<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kiosko de Turnos - Salud Linux</title>
    
    @{
        // Esto asegura que la vista se renderice sin el layout principal (men√∫s, etc.)
        Layout = null; 
    }

    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    
    <style>
        /* Estilos optimizados para una interfaz de kiosko t√°ctil */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #eef2f6;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100vw; 
            margin: 0;
            padding: 1rem;
            overflow: hidden; /* Evita barras de desplazamiento */
        }
        .kiosk-card {
            background-color: white;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            max-width: 600px;
            width: 100%;
        }
        .kiosk-btn {
            padding: 1.5rem 2.5rem;
            font-size: 1.5rem;
            font-weight: 700;
            border-radius: 1rem;
            transition: all 0.2s;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            min-height: 5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .btn-primary-kiosk {
            background-color: #3b82f6; 
            color: white;
        }
        .btn-primary-kiosk:hover:enabled {
            background-color: #2563eb;
            transform: translateY(-2px);
        }
        .btn-secondary-kiosk {
            background-color: #f59e0b; 
            color: white;
        }
        .btn-secondary-kiosk:hover:enabled {
            background-color: #d97706;
            transform: translateY(-2px);
        }
        .input-text {
            font-size: 1.5rem;
            padding: 0.75rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.5rem;
            width: 100%;
            text-align: center;
        }
        #customAlert {
            z-index: 100; /* Asegura que est√© por encima de todo */
        }
    </style>
</head>
<body>
    
<div class="kiosk-card">
    
    <header class="text-center mb-8">
        <h1 class="text-4xl font-extrabold text-gray-800">
            <i class="fas fa-hospital-alt text-blue-500"></i> Bienvenido a Salud Linux
        </h1>
    </header>
    
    <main>
        <div id="initialScreen" class="space-y-6">
            <p class="text-xl text-gray-600 text-center font-semibold">
                Seleccione una opci√≥n para obtener su turno:
            </p>
            <div class="flex flex-col md:flex-row gap-4">
                <button id="btnShowSearch" class="kiosk-btn btn-primary-kiosk flex-1">
                    <i class="fas fa-address-card mr-3"></i> Ingresar con Documento
                </button>
                <button id="btnAnonymousTurn" class="kiosk-btn btn-secondary-kiosk flex-1">
                    <i class="fas fa-user-plus mr-3"></i> Turno para Visitante
                </button>
            </div>
        </div>

        <div id="searchSection" class="hidden space-y-6">
            <p class="text-xl text-gray-700 font-medium">
                Ingrese su n√∫mero de documento:
            </p>
            <input type="number" id="inputDocumento" placeholder="Ej: 1085000000" class="input-text focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition" />
            
            <div class="flex flex-col md:flex-row justify-between gap-4 pt-4">
                <button id="btnVolver" class="kiosk-btn bg-gray-300 text-gray-800 hover:bg-gray-400 flex-1">
                    <i class="fas fa-arrow-left mr-3"></i> Volver
                </button>
                <button id="btnBuscar" class="kiosk-btn bg-green-500 text-white hover:bg-green-600 flex-1">
                    <i class="fas fa-search mr-3"></i> Buscar
                </button>
            </div>
            
            <div id="loadingIndicator" class="text-center text-blue-500 font-bold hidden pt-4">
                <i class="fas fa-spinner fa-spin mr-2"></i> Buscando, por favor espere...
            </div>
        </div>

        <div id="ticketSection" class="hidden text-center space-y-6">
            <h2 id="welcomeMessage" class="text-3xl font-bold text-gray-800"></h2>
            
            <button id="btnPedirTurno" class="kiosk-btn bg-red-500 text-white hover:bg-red-600 w-full">
                <i class="fas fa-ticket-alt mr-3"></i> OBTENER TURNO
            </button>
            
            <div id="mensajeTurno" class="text-xl font-semibold text-gray-600 pt-4"></div>
        </div>
    </main>
</div>

<div id="customAlert" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white p-8 rounded-xl shadow-2xl text-center max-w-sm w-full mx-4">
        <h3 id="alertTitle" class="text-2xl font-bold mb-3">Aviso</h3>
        <p id="alertMessage" class="text-gray-700 mb-6 text-lg">Mensaje de alerta.</p>
        <button id="alertCloseBtn" class="w-full bg-red-500 text-white px-4 py-3 rounded-lg hover:bg-red-600 font-bold text-lg">
            Cerrar
        </button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {

    // --- Referencias a Elementos del DOM ---
    const initialScreen = document.getElementById('initialScreen');
    const searchSection = document.getElementById('searchSection');
    const ticketSection = document.getElementById('ticketSection');
    
    const btnShowSearch = document.getElementById('btnShowSearch');
    const btnAnonymousTurn = document.getElementById('btnAnonymousTurn');
    const btnBuscar = document.getElementById('btnBuscar');
    const btnVolver = document.getElementById('btnVolver');
    const btnPedirTurno = document.getElementById('btnPedirTurno');
    
    const inputDocumento = document.getElementById('inputDocumento');
    const welcomeMessage = document.getElementById('welcomeMessage');
    const mensajeTurno = document.getElementById('mensajeTurno');
    const loadingIndicator = document.getElementById('loadingIndicator');

    // --- Modal de Alerta ---
    const customAlert = document.getElementById('customAlert');
    const alertTitle = document.getElementById('alertTitle');
    const alertMessage = document.getElementById('alertMessage');
    const alertCloseBtn = document.getElementById('alertCloseBtn');

    // Variable para guardar los datos del afiliado encontrado
    let currentAffiliate = null;

    // --- Funci√≥n de Alerta Personalizada ---
    function showAlert(title, message) {
        alertTitle.textContent = title;
        alertMessage.textContent = message;
        customAlert.classList.remove('hidden');
    }
    alertCloseBtn.addEventListener('click', () => customAlert.classList.add('hidden'));

    // --- Navegaci√≥n entre Pantallas ---
    btnShowSearch.addEventListener('click', () => {
        initialScreen.classList.add('hidden');
        searchSection.classList.remove('hidden');
        ticketSection.classList.add('hidden');
        inputDocumento.focus();
    });

    btnVolver.addEventListener('click', () => {
        initialScreen.classList.remove('hidden');
        searchSection.classList.add('hidden');
        inputDocumento.value = ''; // Limpiar campo al volver
    });
    
    function imprimirTiquete(ticketId) {
        const url = `/Print/Ticket/${ticketId}`;
        window.open(url, 'ImpresionTiquete', 'width=300,height=300,left=100,top=100');
    }

    /**
     * Genera un turno para el afiliado actual (identificado o an√≥nimo).
     */
    async function generarTurno() {
        if (currentAffiliate === null) return;

        // Deshabilitar botones para evitar m√∫ltiples clics
        btnPedirTurno.disabled = true;
        btnAnonymousTurn.disabled = true;
        btnPedirTurno.classList.add('hidden'); // Ocultar bot√≥n de confirmar

        mensajeTurno.innerHTML = `<p class="text-xl text-gray-700 font-semibold mt-4"><i class="fas fa-spinner fa-spin mr-2"></i> Generando su turno...</p>`;

        try {
            // Si el afiliado tiene documentId, se usa. Si no, la cadena vac√≠a para turno an√≥nimo.
            const docId = currentAffiliate.documentId || '';
            const url = `/api/Tickets/${docId}`;
            
            const response = await fetch(url, { method: 'POST' });

            if (!response.ok) {
                const errorData = await response.json().catch(() => null);
                throw new Error(errorData?.message || 'Error del servidor al crear el tiquete.');
            }

            const nuevoTiquete = await response.json();
            
            // üéüÔ∏è Muestra el turno generado con √©xito
            mensajeTurno.innerHTML = `
                <p class="text-3xl text-green-600 font-extrabold">¬°TURNO GENERADO!</p>
                <p class="text-7xl font-black text-blue-600 my-4">${nuevoTiquete.ticketCode}</p>
                <p class="text-xl text-gray-700">Su tiquete se est√° imprimiendo. Gracias por su espera.</p>`;
            
            imprimirTiquete(nuevoTiquete.id);

        } catch (error) {
            console.error('Error al pedir el turno:', error);
            showAlert('Error de Servicio', `No se pudo generar su turno. ${error.message}`);
            mensajeTurno.textContent = ''; // Limpiar mensaje de "generando..."
            btnPedirTurno.classList.remove('hidden'); // Reaparecer el bot√≥n para reintentar
        
        } finally {
            // Reinicia el kiosko despu√©s de 10 segundos para el siguiente usuario
            setTimeout(() => { 
                location.reload(); 
            }, 10000); 
        }
    }

    // --- Asignaci√≥n de Eventos ---

    // 1. Bot√≥n para turno an√≥nimo / visitante
    btnAnonymousTurn.addEventListener('click', () => {
        initialScreen.classList.add('hidden');
        ticketSection.classList.remove('hidden');
        welcomeMessage.textContent = "Bienvenido, Visitante";
        currentAffiliate = { id: null, fullName: 'Visitante An√≥nimo', documentId: null };
        generarTurno(); // Llama a generar turno inmediatamente
    });

    // 2. Bot√≥n para confirmar turno despu√©s de buscar
    btnPedirTurno.addEventListener('click', generarTurno);

    // 3. Bot√≥n para buscar afiliado por documento
    btnBuscar.addEventListener('click', async () => {
        const docId = inputDocumento.value.trim();
        if (!docId) {
            showAlert('Campo Vac√≠o', 'Por favor, ingrese su n√∫mero de documento.');
            return;
        }

        loadingIndicator.classList.remove('hidden');
        btnBuscar.disabled = true;
        btnVolver.disabled = true;

        try {
            const response = await fetch(`/api/Affiliates/ByDocument/${docId}`);
            
            if (response.status === 404) {
                showAlert('Afiliado No Encontrado', 'No encontramos ese documento. Puede obtener un turno como visitante si lo desea.');
                // Se crea un afiliado temporal para registrar el turno con el documento ingresado
                currentAffiliate = { id: null, fullName: `Visitante (${docId})`, documentId: docId };
            
            } else if (!response.ok) {
                throw new Error('Error del servidor: ' + response.statusText);
            } else {
                currentAffiliate = await response.json();
            }
            
            // Mostrar la pantalla de confirmaci√≥n
            welcomeMessage.textContent = `Hola, ${currentAffiliate.fullName}`;
            searchSection.classList.add('hidden');
            ticketSection.classList.remove('hidden');

        } catch (error) {
            console.error('Error buscando afiliado:', error);
            showAlert('Error de Conexi√≥n', 'No se pudo completar la b√∫squeda. Por favor, intente de nuevo.');
        
        } finally {
            loadingIndicator.classList.add('hidden');
            btnBuscar.disabled = false;
            btnVolver.disabled = false;
        }
    });

});
</script>

</body>
</html>