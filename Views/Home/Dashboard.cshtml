@{
    ViewData["Title"] = "Panel de Control";
    // Usar un layout de Bootstrap si lo tienes, o dejarlo como está.
    // Layout = "_LayoutBootstrap"; 
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - System EPS</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&family=Oswald:wght@500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Dashboard.css" asp-append-version="true" />
</head>
<body>

<aside class="sidebar d-none d-lg-flex flex-column text-white p-3">
    <div class="h4 fw-bold text-info border-bottom border-secondary pb-3 mb-4">
        <i class="fas fa-heartbeat me-2"></i> System EPS
    </div>

    <nav class="nav flex-column flex-grow-1">
        <h6 class="text-uppercase small text-white-50 mb-2 px-2">Módulos</h6>
        <a href="@Url.Action("Dashboard", "Home")" class="nav-link active rounded-3 mb-1 px-3 py-2 d-flex align-items-center">
            <i class="fas fa-desktop text-success"></i><span class="ms-3">Panel de Control</span>
        </a>
        <a href="@Url.Action("ManageAffiliate", "Home")" class="nav-link rounded-3 mb-1 px-3 py-2 d-flex align-items-center">
            <i class="fas fa-user-plus text-warning"></i><span class="ms-3">Gestión de Afiliados</span>
        </a>

        <h6 class="text-uppercase small text-white-50 mt-4 mb-2 px-2">Visualización</h6>
        <a href="@Url.Action("Kiosk", "Home")" target="_blank" class="nav-link rounded-3 mb-1 px-3 py-2 d-flex align-items-center">
            <i class="fas fa-tablet-alt text-info"></i><span class="ms-3">Kiosko de Turnos</span>
        </a>
        <a href="@Url.Action("TurnDisplay", "Home")" target="_blank" class="nav-link rounded-3 mb-1 px-3 py-2 d-flex align-items-center">
            <i class="fas fa-tv text-danger"></i><span class="ms-3">Pantalla de Llamadas</span>
        </a>
    </nav>
    
    <div class="mt-auto border-top border-secondary pt-3 text-center">
        <p class="small text-white-50 mb-0">Salud Linux &copy; @DateTime.Now.Year</p>
    </div>
</aside>

<div class="offcanvas offcanvas-start bg-dark text-white" tabindex="-1" id="sidebarMobile" aria-labelledby="sidebarMobileLabel">
  <div class="offcanvas-header border-bottom border-secondary">
    <h5 class="offcanvas-title h4 fw-bold text-info" id="sidebarMobileLabel"><i class="fas fa-heartbeat me-2"></i> System EPS</h5>
    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
     <nav class="nav flex-column flex-grow-1">
        <h6 class="text-uppercase small text-white-50 mb-2 px-2">Módulos</h6>
        <a href="@Url.Action("Dashboard", "Home")" class="nav-link active rounded-3 mb-1 px-3 py-3 d-flex align-items-center">
            <i class="fas fa-desktop text-success"></i><span class="ms-3">Panel de Control</span>
        </a>
        <a href="@Url.Action("ManageAffiliate", "Home")" class="nav-link rounded-3 mb-1 px-3 py-3 d-flex align-items-center">
            <i class="fas fa-user-plus text-warning"></i><span class="ms-3">Gestión de Afiliados</span>
        </a>

        <h6 class="text-uppercase small text-white-50 mt-4 mb-2 px-2">Visualización</h6>
        <a href="@Url.Action("Kiosk", "Home")" target="_blank" class="nav-link rounded-3 mb-1 px-3 py-3 d-flex align-items-center">
            <i class="fas fa-tablet-alt text-info"></i><span class="ms-3">Kiosko de Turnos</span>
        </a>
        <a href="@Url.Action("TurnDisplay", "Home")" target="_blank" class="nav-link rounded-3 mb-1 px-3 py-3 d-flex align-items-center">
            <i class="fas fa-tv text-danger"></i><span class="ms-3">Pantalla de Llamadas</span>
        </a>
    </nav>
  </div>
</div>

<main class="content-wrapper p-4">
    <div class="container-fluid">
        
        <header class="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-3">
            <div class="d-flex align-items-center">
                <button class="btn btn-outline-secondary d-lg-none me-3" type="button" data-bs-toggle="offcanvas" data-bs-target="#sidebarMobile">
                    <i class="fas fa-bars"></i>
                </button>
                <h1 class="h3 fw-bolder text-dark mb-0">Panel de Control de Turnos</h1>
            </div>
            <button id="btnResetSystem" class="btn btn-reset text-white px-4 py-2 rounded-3 fw-bold shadow">
                <i class="fas fa-redo me-2"></i> Reiniciar Sistema
            </button>
        </header>
        
        <div class="row g-4">
            
            <div class="col-lg-4">
                <div class="card shadow-sm border-0 h-100">
                    <div class="card-header bg-dark text-white fw-bold h5 d-flex align-items-center">
                        <i class="fas fa-desktop me-3"></i> Panel de Operación
                    </div>
                    <div class="card-body p-4 d-flex flex-column">
                        <div class="mb-4">
                            <label for="selectServiceDesk" class="form-label fw-bold mb-2">
                                <i class="fas fa-cash-register me-2"></i> Puesto de Atención:
                            </label>
                            <select id="selectServiceDesk" class="form-select form-select-lg">
                                 @if (ViewBag.ServiceDesks != null) {
                                    @foreach (var desk in ViewBag.ServiceDesks) {
                                        <option value="@desk.Id">@desk.DeskNumber</option>
                                    }
                                }
                            </select>
                        </div>
                        <button id="btnLlamarSiguiente" class="btn btn-llamar w-100 p-3 rounded-3 h5 fw-bold text-white shadow-lg mb-4">
                            <i class="fas fa-phone-volume me-2"></i> Llamar Siguiente
                        </button>
                        <div id="cardAtendiendo" class="card card-atendiendo text-center shadow-lg text-white">
                             <h5 class="h6 fw-bold text-white-50 mb-2">
                                <i class="fas fa-user-nurse me-2"></i> ATENDIENDO AHORA
                            </h5>
                            <div id="turnoActual" class="font-oswald fw-bolder">- - -</div>
                            <div id="afiliadoActual" class="small">Esperando turno...</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                 <h3 class="h4 fw-bolder text-dark mb-3 d-flex align-items-center">
                    <i class="fas fa-users me-3 text-primary"></i> Fila de Espera
                </h3>
                <div class="card shadow-sm border-0">
                    <div class="card-body p-2 custom-scrollbar overflow-y-auto" style="max-height: calc(100vh - 180px);">
                        <ul id="listaEspera" class="list-group list-group-flush">
                            <li class="list-group-item text-muted text-center p-4">Cargando...</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <h3 class="h4 fw-bolder text-dark mb-3 d-flex align-items-center">
                    <i class="fas fa-history me-3 text-indigo"></i> Historial de Hoy
                </h3>
                <div class="card shadow-sm border-0">
                     <div class="table-responsive custom-scrollbar" style="max-height: calc(100vh - 180px);">
                        <table class="table table-hover table-sm mb-0">
                            <thead class="table-light" style="position: sticky; top: 0;">
                                <tr>
                                    <th class="px-3 py-2 text-uppercase small">Turno</th>
                                    <th class="px-3 py-2 text-uppercase small">Hora</th>
                                    <th class="px-3 py-2 text-uppercase small">Afiliado</th>
                                </tr>
                            </thead>
                            <tbody id="historialHoy">
                                <tr><td colspan="3" class="px-3 py-4 text-center text-muted">Cargando...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
<script>
    // --- LÓGICA DEL BOTÓN DE REINICIO ---
    document.getElementById('btnResetSystem')?.addEventListener('click', async () => {
        if (!confirm('¿Está seguro de reiniciar el sistema? Esto eliminará todos los turnos del día.')) {
            return;
        }
        
        const btn = document.getElementById('btnResetSystem');
        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Reiniciando...';
        
        try {
            const response = await fetch('/api/Tickets/reset', { method: 'POST' });
            if (response.ok) {
                alert('Sistema reiniciado correctamente');
                location.reload();
            } else {
                alert('Error al reiniciar el sistema');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error de conexión');
        } finally {
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-redo mr-2"></i> Reiniciar Sistema';
        }
    });

    // --- JS DEL DASHBOARD (dashboard.js) ---
    document.addEventListener('DOMContentLoaded', () => {
        // --- Referencias a los Elementos del DOM ---
        const selectServiceDesk = document.getElementById('selectServiceDesk');
        const btnLlamarSiguiente = document.getElementById('btnLlamarSiguiente');
        const turnoActualDiv = document.getElementById('turnoActual');
        const afiliadoActualDiv = document.getElementById('afiliadoActual');
        const cardAtendiendo = document.getElementById('cardAtendiendo');
        const listaEsperaUl = document.getElementById('listaEspera');
        const historialHoyTbody = document.getElementById('historialHoy');

        // --- Conexión a SignalR ---
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/queueHub")
            .withAutomaticReconnect()
            .build();

        // --- Funciones para Renderizar la UI ---

        function renderWaitingList(tickets) {
            listaEsperaUl.innerHTML = '';
            if (!tickets || tickets.length === 0) {
                listaEsperaUl.innerHTML = '<li class="list-group-item text-muted text-center p-4">No hay turnos en espera.</li>';
                return;
            }
            tickets.forEach(ticket => {
                const li = document.createElement('li');
                li.className = 'list-item-animation list-group-item d-flex justify-content-between align-items-center';
                li.innerHTML = `
                    <div>
                        <span class="font-oswald h5 fw-medium text-dark">${ticket.ticketCode}</span>
                        <span class="d-block small text-muted">${ticket.affiliate?.fullName ?? 'Visitante'}</span>
                    </div>
                    <span class="badge bg-light text-dark small">${new Date(ticket.createdAt).toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit' })}</span>
                `;
                listaEsperaUl.appendChild(li);
            });
        }

        function renderHistoryTable(tickets) {
            historialHoyTbody.innerHTML = '';
            if (!tickets || tickets.length === 0) {
                historialHoyTbody.innerHTML = '<tr><td colspan="3" class="px-3 py-4 text-center text-muted">No hay turnos atendidos hoy.</td></tr>';
                return;
            }
            tickets.forEach(ticket => {
                const tr = document.createElement('tr');
                tr.className = 'list-item-animation';

                const horaAtencion = ticket.servedAt
                    ? new Date(ticket.servedAt).toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit', second: '2-digit' })
                    : 'N/A';

                tr.innerHTML = `
                    <td class="px-3 py-2 align-middle">
                        <span class="font-oswald fw-medium text-dark">${ticket.ticketCode}</span>
                    </td>
                    <td class="px-3 py-2 text-muted small align-middle">${horaAtencion}</td>
                    <td class="px-3 py-2 text-dark small align-middle">${ticket.affiliate?.fullName ?? 'Visitante'}</td>
                `;
                historialHoyTbody.appendChild(tr);
            });
        }

        function updateAtendiendoCard(ticket) {
            if (ticket) {
                turnoActualDiv.textContent = ticket.ticketCode;
                afiliadoActualDiv.textContent = ticket.affiliate?.fullName ?? 'Visitante';
                if (cardAtendiendo) {
                    cardAtendiendo.classList.add('active');
                    setTimeout(() => { cardAtendiendo.classList.remove('active'); }, 2000);
                }
            } else {
                turnoActualDiv.textContent = '- - -';
                afiliadoActualDiv.textContent = 'Esperando turno...';
                if (cardAtendiendo) {
                    cardAtendiendo.classList.remove('active');
                }
            }
        }

        async function loadInitialData() {
            try {
                const [waitingResponse, historyResponse] = await Promise.all([
                    fetch('/api/Tickets'),
                    fetch('/api/Tickets/history/today')
                ]);
                if (!waitingResponse.ok || !historyResponse.ok) throw new Error('Error al cargar los datos');
                
                const waitingTickets = await waitingResponse.json();
                const historyTickets = await historyResponse.json();

                renderWaitingList(waitingTickets);
                renderHistoryTable(historyTickets);
                console.log('✅ Dashboard: Datos iniciales cargados');
            } catch (error) {
                console.error("❌ Error al cargar los datos iniciales:", error);
                listaEsperaUl.innerHTML = '<li class="list-group-item text-danger text-center p-4">Error al cargar la fila de espera.</li>';
                historialHoyTbody.innerHTML = '<tr><td colspan="3" class="px-3 py-4 text-center text-danger">Error al cargar el historial.</td></tr>';
            }
        }

        async function reloadHistory() {
            try {
                const response = await fetch('/api/Tickets/history/today');
                if (!response.ok) throw new Error('Error al cargar historial');
                const historyTickets = await response.json();
                renderHistoryTable(historyTickets);
                console.log('🔄 Dashboard: Historial actualizado');
            } catch (error) {
                console.error("❌ Error al recargar el historial:", error);
            }
        }

        if (btnLlamarSiguiente) {
            btnLlamarSiguiente.addEventListener('click', async () => {
                const serviceDeskId = selectServiceDesk.value;
                if (!serviceDeskId) {
                    alert('Por favor, seleccione un puesto de atención.');
                    return;
                }
                btnLlamarSiguiente.disabled = true;
                btnLlamarSiguiente.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Llamando...';

                try {
                    const response = await fetch(`/api/Tickets/next/${serviceDeskId}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } });
                    if (response.status === 404) {
                        alert('No hay más turnos en la fila de espera.');
                        updateAtendiendoCard(null);
                    } else if (!response.ok) {
                        throw new Error('Error en el servidor al llamar al turno.');
                    } else {
                        const calledTicket = await response.json();
                        console.log('📞 Dashboard: Turno llamado localmente', calledTicket);
                        updateAtendiendoCard(calledTicket);
                    }
                } catch (error) {
                    console.error("❌ Error al llamar al siguiente turno:", error);
                    alert('Ocurrió un error al intentar llamar al turno.');
                } finally {
                    btnLlamarSiguiente.disabled = false;
                    btnLlamarSiguiente.innerHTML = '<i class="fas fa-phone-volume me-2"></i> Llamar Siguiente';
                }
            });
        }

        connection.on("ReceiveNewCall", (ticket) => {
            console.log('📢 Dashboard: Recibido nuevo llamado por SignalR', ticket);
            updateAtendiendoCard(ticket);
            setTimeout(() => reloadHistory(), 500);
        });

        connection.on("UpdateWaitingList", (waitingTickets) => {
            console.log('📋 Dashboard: Lista de espera actualizada', waitingTickets);
            renderWaitingList(waitingTickets);
        });
        
        connection.on("SystemReset", () => {
            console.log('🔄 Dashboard: Sistema reiniciado');
            renderWaitingList([]);
            renderHistoryTable([]);
            updateAtendiendoCard(null);
        });

        async function start() {
            try {
                await connection.start();
                console.log("✅ SignalR conectado (Dashboard)");
                await loadInitialData();
            } catch (err) {
                console.error("❌ Error de conexión SignalR:", err);
                setTimeout(start, 5000);
            }
        }
        connection.onreconnected(() => {
            console.log("🔄 SignalR reconectado");
            loadInitialData();
        });
        start();
    });
</script>

</body>
</html>